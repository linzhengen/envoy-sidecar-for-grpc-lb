// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Choice int32

const (
	// グー
	Choice_GU Choice = 0
	// チョキ
	Choice_CHOKI Choice = 1
	// パー
	Choice_PA Choice = 2
)

var Choice_name = map[int32]string{
	0: "GU",
	1: "CHOKI",
	2: "PA",
}

var Choice_value = map[string]int32{
	"GU":    0,
	"CHOKI": 1,
	"PA":    2,
}

func (x Choice) String() string {
	return proto.EnumName(Choice_name, int32(x))
}

func (Choice) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}

type JankenRequest struct {
	Koukun               Choice   `protobuf:"varint,1,opt,name=koukun,proto3,enum=pb.Choice" json:"koukun,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JankenRequest) Reset()         { *m = JankenRequest{} }
func (m *JankenRequest) String() string { return proto.CompactTextString(m) }
func (*JankenRequest) ProtoMessage()    {}
func (*JankenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}

func (m *JankenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JankenRequest.Unmarshal(m, b)
}
func (m *JankenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JankenRequest.Marshal(b, m, deterministic)
}
func (m *JankenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JankenRequest.Merge(m, src)
}
func (m *JankenRequest) XXX_Size() int {
	return xxx_messageInfo_JankenRequest.Size(m)
}
func (m *JankenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JankenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JankenRequest proto.InternalMessageInfo

func (m *JankenRequest) GetKoukun() Choice {
	if m != nil {
		return m.Koukun
	}
	return Choice_GU
}

type JankenResponse struct {
	Koukun               Choice   `protobuf:"varint,1,opt,name=koukun,proto3,enum=pb.Choice" json:"koukun,omitempty"`
	Shinkun              Choice   `protobuf:"varint,2,opt,name=shinkun,proto3,enum=pb.Choice" json:"shinkun,omitempty"`
	Winner               string   `protobuf:"bytes,3,opt,name=winner,proto3" json:"winner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JankenResponse) Reset()         { *m = JankenResponse{} }
func (m *JankenResponse) String() string { return proto.CompactTextString(m) }
func (*JankenResponse) ProtoMessage()    {}
func (*JankenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{1}
}

func (m *JankenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JankenResponse.Unmarshal(m, b)
}
func (m *JankenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JankenResponse.Marshal(b, m, deterministic)
}
func (m *JankenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JankenResponse.Merge(m, src)
}
func (m *JankenResponse) XXX_Size() int {
	return xxx_messageInfo_JankenResponse.Size(m)
}
func (m *JankenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JankenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JankenResponse proto.InternalMessageInfo

func (m *JankenResponse) GetKoukun() Choice {
	if m != nil {
		return m.Koukun
	}
	return Choice_GU
}

func (m *JankenResponse) GetShinkun() Choice {
	if m != nil {
		return m.Shinkun
	}
	return Choice_GU
}

func (m *JankenResponse) GetWinner() string {
	if m != nil {
		return m.Winner
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.Choice", Choice_name, Choice_value)
	proto.RegisterType((*JankenRequest)(nil), "pb.JankenRequest")
	proto.RegisterType((*JankenResponse)(nil), "pb.JankenResponse")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_38fc58335341d769) }

var fileDescriptor_38fc58335341d769 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4f, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe6, 0xe2, 0xf5, 0x4a,
	0xcc, 0xcb, 0x4e, 0xcd, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x52, 0xe2, 0x62, 0xcb,
	0xce, 0x2f, 0xcd, 0x2e, 0xcd, 0x93, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0xe2, 0xd2, 0x2b, 0x48,
	0xd2, 0x73, 0xce, 0xc8, 0xcf, 0x4c, 0x4e, 0x0d, 0x82, 0xca, 0x28, 0x15, 0x71, 0xf1, 0xc1, 0x34,
	0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x12, 0xa3, 0x4b, 0x48, 0x85, 0x8b, 0xbd, 0x38, 0x23, 0x33,
	0x0f, 0xa4, 0x88, 0x09, 0x43, 0x11, 0x4c, 0x4a, 0x48, 0x8c, 0x8b, 0xad, 0x3c, 0x33, 0x2f, 0x2f,
	0xb5, 0x48, 0x82, 0x59, 0x81, 0x51, 0x83, 0x33, 0x08, 0xca, 0xd3, 0x52, 0xe6, 0x62, 0x83, 0x28,
	0x15, 0x62, 0xe3, 0x62, 0x72, 0x0f, 0x15, 0x60, 0x10, 0xe2, 0xe4, 0x62, 0x75, 0xf6, 0xf0, 0xf7,
	0xf6, 0x14, 0x60, 0x04, 0x09, 0x05, 0x38, 0x0a, 0x30, 0x19, 0x59, 0x72, 0xb1, 0x41, 0x1c, 0x26,
	0xa4, 0xcf, 0xc5, 0x12, 0x9c, 0x91, 0x5f, 0x2e, 0x24, 0x08, 0xb2, 0x03, 0xc5, 0x87, 0x52, 0x42,
	0xc8, 0x42, 0x10, 0xf7, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0xc3, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0x6c, 0x89, 0x45, 0x21, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JankenClient is the client API for Janken service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JankenClient interface {
	Show(ctx context.Context, in *JankenRequest, opts ...grpc.CallOption) (*JankenResponse, error)
}

type jankenClient struct {
	cc *grpc.ClientConn
}

func NewJankenClient(cc *grpc.ClientConn) JankenClient {
	return &jankenClient{cc}
}

func (c *jankenClient) Show(ctx context.Context, in *JankenRequest, opts ...grpc.CallOption) (*JankenResponse, error) {
	out := new(JankenResponse)
	err := c.cc.Invoke(ctx, "/pb.Janken/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JankenServer is the server API for Janken service.
type JankenServer interface {
	Show(context.Context, *JankenRequest) (*JankenResponse, error)
}

// UnimplementedJankenServer can be embedded to have forward compatible implementations.
type UnimplementedJankenServer struct {
}

func (*UnimplementedJankenServer) Show(ctx context.Context, req *JankenRequest) (*JankenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}

func RegisterJankenServer(s *grpc.Server, srv JankenServer) {
	s.RegisterService(&_Janken_serviceDesc, srv)
}

func _Janken_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JankenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JankenServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Janken/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JankenServer).Show(ctx, req.(*JankenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Janken_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Janken",
	HandlerType: (*JankenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Show",
			Handler:    _Janken_Show_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
